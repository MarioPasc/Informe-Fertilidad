y = "Frecuencia") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
return(p)
}
# Aplicar la función a cada variable categórica y almacenar los resultados
resultados <- lapply(categoricas, function(var) obtener_estadisticas_categoricas(combinado, var))
graficos_barras <- lapply(seq_along(resultados), function(i) {
graficar_barras_categoricas(resultados[[i]], categoricas[i])
})
# Chunk 9
datos <- combinado
# Columna DOSIS_1ESTIM, cambiamos CLOMIF y CLOMIFENO por NA_character_
datos <- datos %>%
mutate(DOSIS_1ESTIM = as.character(DOSIS_1ESTIM))
datos <- datos %>%
mutate(DOSIS_1ESTIM = recode(DOSIS_1ESTIM,
"CLOMIF" = NA_character_,
"CLOMIFENO" = NA_character_))
datos$DOSIS_1ESTIM <- as.numeric(datos$DOSIS_1ESTIM)
# Columna DOSIS_2ESTIM, cambiamos CLOMIF y CLOMIFENO por NA_character_
datos <- datos %>%
mutate(DOSIS_2ESTIM = as.character(DOSIS_2ESTIM))
datos <- datos %>%
mutate(DOSIS_2ESTIM = recode(DOSIS_2ESTIM,
"CLOMIF" = NA_character_,
"CLOMIFENO" = NA_character_))
datos$DOSIS_2ESTIM <- as.numeric(datos$DOSIS_2ESTIM)
# Columna FERTILIZ_1ESTIM, cambiamos VITRI por NA_character_
datos <- datos %>%
mutate(FERTILIZ_1ESTIM = as.character(FERTILIZ_1ESTIM))
datos <- datos %>%
mutate(FERTILIZ_1ESTIM = recode(FERTILIZ_1ESTIM,
"VITRI" = NA_character_))
datos$FERTILIZ_1ESTIM <- as.numeric(datos$FERTILIZ_1ESTIM)
# Clínicos
datos <- datos %>%
mutate(`FACTOR_FEM_1` = recode(`FACTOR_FEM_1`,
`Edad` = "BR",
`EDAD` = "BR",
`BR` = "BR",
`BR/EDAD` = "BR",
`EDAD/BR` = "BR",
`ADENO` = "ENDO",
`ADENO/ENDO` = "ENDO",
`Endo/ADENO` = "ENDO",
`ENDO` = "ENDO",
`UTERO D` = "ENDO",
`FALLO IAC` = "ENDO",
`FI` = "ENDO",
`GENETICO` = "ENDO",
`HIDROSALP` = "ENDO",
`NO` = "ENDO",
`AR` = "ENDO"))
datos <- datos %>%
mutate(`FACTOR_MAS` = recode(`FACTOR_MAS`,
`DONANTE` = "NO",
`No` = "NO",
`SEVERO` = "SI",
`SI Fragment` = "SI",
`SI LEVE` = "SI"))
datos <- datos %>%
mutate(`BLASTUL_1ESTIM` = recode(`BLASTUL_1ESTIM`,
`N0` = "NO"))
resultados_2 <- lapply(categoricas, function(var) obtener_estadisticas_categoricas(datos, var))
graficos_barras2 <- lapply(seq_along(resultados_2), function(i) {
graficar_barras_categoricas(resultados_2[[i]], categoricas[i])
})
# Chunk 10
graficos_barras[1]
# Chunk 11
graficos_barras[2]
# Chunk 12
graficos_barras[3]
# Chunk 13
graficos_barras[4]
# Chunk 14
graficos_barras[5]
# Chunk 15
graficos_barras[6]
# Chunk 16
graficos_barras[7]
# Chunk 17
graficos_barras[8]
# Chunk 18
graficos_barras[9]
# Chunk 19
graficos_barras[10]
# Chunk 20
graficos_barras2[1]
# Chunk 21
graficos_barras2[2]
# Chunk 22
graficos_barras2[5]
# Chunk 23
graficos_barras2[6]
# Chunk 24
graficos_barras2[8]
# Chunk 25
graficos_barras2[9]
# Chunk 26
graficos_barras2[10]
# Chunk 27
calc_na_val <- function(df) {
na_val <- sapply(df, function(columna) {
(sum(is.na(columna)) * 100) / nrow(df)
})
na_data <- data.frame(columna = names(na_val), na_count = na_val)
na_data <- na_data[na_data$na_count > 0, ]
return(na_data)
}
combinado <- datos # Actualizamos el dataframe sobre el que trabajamos
plot_na_vals <- function(na_values) {
# Ahora, usamos 'na_data_filtrada' en ggplot
ggplot(na_values, aes(x = columna, y = na_count)) +
geom_bar(stat = "identity", fill = "blue") + # Usamos barras azules para mostrar el conteo de NA's
theme_minimal() + # Aplicamos un tema minimalista para la gráfica
labs(title = "Valores NA por Columna con NA > 0", # Título de la gráfica
x = "Columna", # Etiqueta del eje x
y = "Número de Valores NA (%)") + # Etiqueta del eje y
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ylim(0, 100)
}
na_data <- calc_na_val(combinado)
na_data_pre <- na_data
# Chunk 28
combinado$AMH <- NULL
# Obtenemos los nombres de las columnas numéricas
c1 <- colnames(combinado)[sapply(combinado, is.numeric)]
# Actualizamos los nombres de las columnas numéricas y que tengan valores faltantes
numericas <- na_data$columna[na_data$columna %in% c1]
categoricas <- na_data$columna[!na_data$columna %in% numericas]
graficos_boxplot <- c()
for (var in numericas) {
p <- ggplot(combinado, aes(x = factor(0), y = !!sym(var))) +
geom_boxplot() +
labs(title = paste("Boxplot de", var),
x = NULL, y = var) +
theme_minimal() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
graficos_boxplot <- c(graficos_boxplot, p)
}
# Chunk 29
imputar_valores <- function(df, columna) {
moda <- function(x) {
valores_unicos <- unique(x)
valores_unicos[which.max(tabulate(match(x, valores_unicos)))]
}
# Imputar basándose en si la columna es numérica o categórica
if (is.numeric(df[[columna]])) {
# Usar la mediana para imputar valores faltantes en columnas numéricas
df[[columna]][is.na(df[[columna]])] <- median(df[[columna]], na.rm = TRUE)
} else {
# Usar la moda para imputar valores faltantes en columnas categóricas
df[[columna]][is.na(df[[columna]])] <- moda(df[[columna]][!is.na(df[[columna]])])
}
return(df)
}
df_imputado <- combinado
for (columna in c(numericas, categoricas)) {
df_imputado <- imputar_valores(df_imputado, columna)
}
write.csv(df_imputado, file = "ESTUDIO_Fert_Util.csv", row.names = FALSE)
na_data_post <- calc_na_val(df_imputado)
# Chunk 30
plot_na_vals(na_data_pre)
# Chunk 31
plot_na_vals(na_data_post)
# Chunk 32
ggplot(combinado, aes(x = factor(0), y = !!sym("AFC"))) +
geom_boxplot() +
labs(title = paste("Boxplot de", "AFC"),
x = NULL, y = "AFC") +
theme_minimal() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Chunk 33
ggplot(combinado, aes(x = factor(0), y = !!sym("DOSIS_1ESTIM"))) +
geom_boxplot() +
labs(title = paste("Boxplot de", "DOSIS_1ESTIM"),
x = NULL, y = "DOSIS_1ESTIM") +
theme_minimal() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Chunk 34
ggplot(combinado, aes(x = factor(0), y = !!sym("HMG_1ESTIM"))) +
geom_boxplot() +
labs(title = paste("Boxplot de", "HMG_1ESTIM"),
x = NULL, y = "HMG_1ESTIM") +
theme_minimal() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Chunk 35
ggplot(combinado, aes(x = factor(0), y = !!sym("FERTILIZ_1ESTIM"))) +
geom_boxplot() +
labs(title = paste("Boxplot de", "FERTILIZ_1ESTIM"),
x = NULL, y = "FERTILIZ_1ESTIM") +
theme_minimal() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Chunk 36
ggplot(combinado, aes(x = factor(0), y = !!sym("BT_AA_1ESTIM"))) +
geom_boxplot() +
labs(title = paste("Boxplot de", "BT_AA_1ESTIM"),
x = NULL, y = "BT_AA_1ESTIM") +
theme_minimal() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Chunk 37
ggplot(combinado, aes(x = factor(0), y = !!sym("CONG_1ESTIM"))) +
geom_boxplot() +
labs(title = paste("Boxplot de", "CONG_1ESTIM"),
x = NULL, y = "CONG_1ESTIM") +
theme_minimal() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Chunk 38
ggplot(combinado, aes(x = factor(0), y = !!sym("DOSIS_2ESTIM"))) +
geom_boxplot() +
labs(title = paste("Boxplot de", "DOSIS_2ESTIM"),
x = NULL, y = "DOSIS_2ESTIM") +
theme_minimal() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Chunk 39
ggplot(combinado, aes(x = factor(0), y = !!sym("HMG_2ESTIM"))) +
geom_boxplot() +
labs(title = paste("Boxplot de", "HMG_2ESTIM"),
x = NULL, y = "HMG_2ESTIM") +
theme_minimal() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Chunk 40
ggplot(combinado, aes(x = factor(0), y = !!sym("BT_AA_2ESTIM"))) +
geom_boxplot() +
labs(title = paste("Boxplot de", "BT_AA_2ESTIM"),
x = NULL, y = "BT_AA_2ESTIM") +
theme_minimal() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Chunk 41
ggplot(combinado, aes(x = factor(0), y = !!sym("CONG_2ESTIM"))) +
geom_boxplot() +
labs(title = paste("Boxplot de", "CONG_2ESTIM"),
x = NULL, y = "CONG_2ESTIM") +
theme_minimal() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Chunk 42
# Actualizamos, que siempre viene bien después de haber hecho cambios grandes
numericas <- colnames(df_imputado)[sapply(df_imputado, is.numeric)]
categoricas <- colnames(df_imputado)[!colnames(df_imputado) %in% numericas]
# Vamos a convertir las categóricas a factor.
convertir_a_factores <- function(dataframe, nombres_variables_categoricas) {
for (nombre_variable in nombres_variables_categoricas) {
dataframe[[nombre_variable]] <- as.factor(dataframe[[nombre_variable]])
}
return(dataframe)
}
df_imputado <- convertir_a_factores(df_imputado, categoricas)
# Chunk 43
datatable(
df_imputado,
extensions = c('Buttons', 'FixedColumns', 'FixedHeader'),
options = list(
pageLength = 50,
scrollX = TRUE,
searching = TRUE,
ordering = TRUE,
paging = TRUE,
lengthMenu = list(c(5, 10, 25, 50, -1), c('5 rows', '10 rows', '25 rows', '50 rows', 'Show all')),
buttons = c('copy', 'csv', 'excel'),
dom = 'Bfrtip'
),
class = 'cell-border stripe'
)
# Chunk 44
calcular_estadisticas <- function(df) {
# Obtener las columnas numéricas del data frame
numericas <- sapply(df, is.numeric)
col_numericas <- names(df)[numericas]
# Estadística Numérica. El cálculo es bastante directo.
minimos <- sapply(df[col_numericas], min)
q1 <- sapply(df[col_numericas], function(x) quantile(x, 0.25))
medianas <- sapply(df[col_numericas], median)
medias <- sapply(df[col_numericas], mean)
sd <- sapply(df[col_numericas], sd)
q3 <- sapply(df[col_numericas], function(x) quantile(x, 0.75))
maximos <- sapply(df[col_numericas], max)
iqr_values <- q3 - q1
# Calcular outliers. Asumimos que se consideran outliers a partir de 1.5*IQR
outliers_count <- sapply(seq_along(col_numericas), function(i) {
lower_bound <- q1[i] - 1.5 * iqr_values[i]
upper_bound <- q3[i] + 1.5 * iqr_values[i]
sum(df[[col_numericas[i]]] < lower_bound | df[[col_numericas[i]]] > upper_bound)
})
# Combinar en un data.frame
resumen_df <- data.frame(
Media = round(medias, 4),
Sd = round(sd, 4),
Minimo = minimos,
Q1 = q1,
Mediana = medianas,
Q3 = q3,
Maximo = maximos,
IQR = iqr_values,
Outliers = outliers_count
)
return(resumen_df)
}
resumen_df <- calcular_estadisticas(df_imputado)
# Chunk 45
datatable(
resumen_df,
extensions = c('Buttons', 'FixedColumns', 'FixedHeader'),
options = list(
pageLength = 10,
scrollX = TRUE,
searching = TRUE,
ordering = TRUE,
paging = TRUE,
lengthMenu = list(c(5, 10, 25, 50, -1), c('5 rows', '10 rows', '25 rows', '50 rows', 'Show all')),
buttons = c('copy', 'csv', 'excel'),
dom = 'Bfrtip'
),
class = 'cell-border stripe'
)
# Chunk 46
selectInput("varX", "Selecciona la variable para el eje X:", choices = numericas)
selectInput("varY", "Selecciona la variable para el eje Y:", choices = numericas)
renderPlotly({
# Comprueba si las variables han sido seleccionadas
if (is.null(input$varX) || is.null(input$varY)) {
return(NULL)
}
# Esto ha sido lo mejor que he podido hacer con plotly.
p <- plot_ly(data = df_imputado,                    # Utiliza el data frame df_imputado como fuente de datos.
x = ~eval(as.name(input$varX)),       # Especifica la variable en el eje x, usando el valor de input$varX.
y = ~eval(as.name(input$varY))) %>%   # Especifica la variable en el eje y, usando el valor de input$varY.
# Agrega puntos al gráfico (scatter plot).
add_markers() %>%
layout(title = paste("Dispersion entre", input$varX, "y", input$varY),  # Título del gráfico, con las variables seleccionadas.
xaxis = list(title = input$varX),        # Etiqueta del eje x, con el nombre de la variable seleccionada.
yaxis = list(title = input$varY))        # Etiqueta del eje y, con el nombre de la variable seleccionada.
p
})
# Chunk 47
resultados_3 <- lapply(categoricas, function(var) obtener_estadisticas_categoricas(df_imputado, var))
graficos_barras3 <- lapply(seq_along(resultados_3), function(i) {
graficar_barras_categoricas(resultados_3[[i]], categoricas[i])
})
# Chunk 48
graficos_barras3[1]
# Chunk 49
graficos_barras3[2]
# Chunk 50
graficos_barras3[3]
# Chunk 51
graficos_barras3[4]
# Chunk 52
graficos_barras3[5]
# Chunk 53
graficos_barras3[6]
# Chunk 54
graficos_barras3[7]
# Chunk 55
source("./calculaPValor.R")
resultados <- aplicaCalculaPValorATodosLosPares(df_imputado)
# Chunk 56
p_less_than_005 <- sum(resultados$Valor < 0.05) / nrow(resultados) * 100
p_less_than_001_given_005 <- sum(resultados$Valor < 0.01 & resultados$Valor < 0.05) / sum(resultados$Valor < 0.05) * 100
print(paste("Porcentaje de tests con un valor p<0.05: ", round(p_less_than_005, 3), "%", sep = ""))
print(paste("Porcentaje de tests con un valor p<0.01 (sobre el porcentaje de tests con p<0.05): ", round(p_less_than_001_given_005, 3), "%", sep = ""))
# Chunk 57
datatable(
resultados,
extensions = c('Buttons', 'FixedColumns', 'FixedHeader'),
options = list(
pageLength = 10,
scrollX = TRUE,
searching = TRUE,
ordering = TRUE,
paging = TRUE,
lengthMenu = list(c(5, 10, 25, 50, -1), c('5 rows', '10 rows', '25 rows', '50 rows', 'Show all')),
buttons = c('copy', 'csv', 'excel'),
dom = 'Bfrtip'
),
class = 'cell-border stripe'
)
# Chunk 58
ultimo_plot <- ggplot(resultados, aes(x = VariableX, y = VariableY, fill = Valor)) +
geom_tile(color = "white") +
geom_text(aes(label = sprintf("%.2g", Valor)), size = 3, color = "black", vjust = "inward") +
scale_fill_gradient(low = "white", high = "red", limits = c(0, 1), name = "P-valor") +
labs(title = "Heatmap de P-valores", x = "Variable X", y = "Variable Y") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(angle = 45, hjust = 1, vjust = 1),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
plot.title = element_text(hjust = 0.5),
plot.margin = margin(t = 1, r = 1, b = 1, l = 1, unit = "cm"))
ultimo_plot
# Chunk 59
# Preprocesar los datos para agregar una nueva columna que indica la categoría de significancia
resultados <- resultados %>%
mutate(Significancia = case_when(
Valor < 0.01 ~ "p < 0.01",
Valor < 0.05 ~ "p < 0.05",
TRUE ~ "p >= 0.05"
))
# Contar la cantidad de tests por tipo y su categoría de significancia
df_agregado <- resultados %>%
group_by(Test, Significancia) %>%
summarise(N = n(), .groups = 'drop')
# Crear la gráfica de barras
ggplot(df_agregado, aes(fill = Significancia, y = N, x = Test)) +
geom_bar(position = "stack", stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Tipo de Test",
y = "Cantidad de Muestras",
fill = "Categoría de Significancia") +
scale_fill_manual(values = c("p < 0.01" = "red", "p < 0.05" = "blue", "p >= 0.05" = "grey"))
# Chunk 60
resultados %>%
# Filtra las filas donde las variables X o Y contienen la cadena "BLASTUL_1ESTIM" o "BLASTUL_2ESTIM",
# Filtra aquellas filas donde las variables X o Y contienen la cadena "GRUPO"
filter(
grepl("BLASTUL_1ESTIM|BLASTUL_2ESTIM", VariableX) | grepl("BLASTUL_1ESTIM|BLASTUL_2ESTIM", VariableY),
grepl("GRUPO", VariableX) | grepl("GRUPO", VariableY)
) %>%
# Ordena las filas resultantes del filtro en orden ascendente basándose en la columna 'Valor',
arrange(Valor)
# Chunk 61
resultados %>%
# Filtra las filas donde las variables X o Y contienen alguna de las variables comunes y la palabra "GRUPO"
filter(
grepl("EDAD|AFC|FACTOR_MAS|FACTOR_FEM_1|BMI", VariableX) & grepl("GRUPO", VariableY) |
grepl("EDAD|AFC|FACTOR_MAS|FACTOR_FEM_1|BMI", VariableY) & grepl("GRUPO", VariableX)
) %>%
# Ordena las filas resultantes del filtro en orden ascendente basándose en la columna 'Valor',
arrange(Valor)
# Chunk 62
#variables_significativas <- resultados %>%
# Primero filtramos para que solo incluya las variables de interés cuando se relacionan con la blastulación
#  dplyr::filter(((VariableX %in% c("EDAD", "AFC", "FACTOR_MAS", "FACTOR_FEM_1", "BMI", "GRUPO") &
#                  (grepl("BLASTUL_1ESTIM", VariableY) | grepl("BLASTUL_2ESTIM", VariableY))) |
#                 (VariableY %in% c("EDAD", "AFC", "FACTOR_MAS", "FACTOR_FEM_1", "BMI") &
#                  (grepl("BLASTUL_1ESTIM", VariableX) | grepl("BLASTUL_2ESTIM", VariableX)))) &
#                Valor < 0.05) %>%
#  dplyr::select(VariableX, VariableY, Valor, Test) %>%
#  dplyr::arrange(VariableY) %>%
# Eliminamos filas duplicadas
#
variables_significativas <- resultados %>%
dplyr::filter((grepl("BLASTUL_1ESTIM", VariableX) | grepl("BLASTUL_2ESTIM", VariableX) |
grepl("BLASTUL_1ESTIM", VariableY) | grepl("BLASTUL_2ESTIM", VariableY)) &
Valor < 0.05) %>%
dplyr::select(VariableX, VariableY, Valor, Test) %>%
dplyr::arrange(VariableY) %>%
distinct() # Elimina filas duplicadasdistinct()
datatable(
variables_significativas,
extensions = c('Buttons', 'FixedColumns', 'FixedHeader'),
options = list(
pageLength = 10,
scrollX = TRUE,
searching = TRUE,
ordering = TRUE,
paging = TRUE,
lengthMenu = list(c(5, 10, 25, 50, -1), c('5 rows', '10 rows', '25 rows', '50 rows', 'Show all')),
buttons = c('copy', 'csv', 'excel'),
dom = 'Bfrtip'
),
class = 'cell-border stripe'
)
# Chunk 63
lr1 <- glm(BLASTUL_1ESTIM ~ EDAD + AFC + FACTOR_FEM_1,
family = binomial(link = "logit"), data = df_imputado)
broom::tidy(lr1.fit)
lr1 <- glm(BLASTUL_1ESTIM ~ EDAD + AFC + FACTOR_FEM_1,
family = binomial(link = "logit"), data = df_imputado)
broom::tidy(lr1.fit)
lr <- glm(BLASTUL_1ESTIM ~ EDAD + AFC + FACTOR_FEM_1,
family = binomial(link = "logit"), data = df_imputado)
broom::tidy(lr.fit1)
lr <- glm(BLASTUL_1ESTIM ~ EDAD + AFC + FACTOR_FEM_1,
family = binomial(link = "logit"), data = df_imputado)
broom::tidy(lr)
lr <- glm(BLASTUL_1ESTIM ~ EDAD + AFC + FACTOR_FEM_1,
family = binomial(link = "logit"), data = df_imputado)
tidy_model <- broom::tidy(lr)
datatable(
tidy_model %>%
mutate_if(is.numeric, round, digits = 4),
options = list(
pageLength = 10
),
class = 'cell-border stripe'
)
rsconnect::deployApp(getwd())
